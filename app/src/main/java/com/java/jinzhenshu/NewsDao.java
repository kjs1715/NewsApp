package com.java.jinzhenshu;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.java.jinzhenshu.bean.News;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS".
*/
public class NewsDao extends AbstractDao<News, Long> {

    public static final String TABLENAME = "NEWS";

    /**
     * Properties of entity News.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Link = new Property(2, String.class, "link", false, "LINK");
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        public final static Property Category = new Property(4, String.class, "category", false, "CATEGORY");
        public final static Property PubDate = new Property(5, String.class, "pubDate", false, "PUB_DATE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property IsSC = new Property(7, int.class, "isSC", false, "IS_SC");
        public final static Property IsRead = new Property(8, int.class, "isRead", false, "IS_READ");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property LastTime = new Property(10, Long.class, "lastTime", false, "LAST_TIME");
        public final static Property Content = new Property(11, String.class, "content", false, "CONTENT");
    }


    public NewsDao(DaoConfig config) {
        super(config);
    }
    
    public NewsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"LINK\" TEXT," + // 2: link
                "\"AUTHOR\" TEXT," + // 3: author
                "\"CATEGORY\" TEXT," + // 4: category
                "\"PUB_DATE\" TEXT," + // 5: pubDate
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"IS_SC\" INTEGER NOT NULL ," + // 7: isSC
                "\"IS_READ\" INTEGER NOT NULL ," + // 8: isRead
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"LAST_TIME\" INTEGER," + // 10: lastTime
                "\"CONTENT\" TEXT);"); // 11: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, News entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(6, pubDate);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
        stmt.bindLong(8, entity.getIsSC());
        stmt.bindLong(9, entity.getIsRead());
        stmt.bindLong(10, entity.getType());
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(11, lastTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, News entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(3, link);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(5, category);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(6, pubDate);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
        stmt.bindLong(8, entity.getIsSC());
        stmt.bindLong(9, entity.getIsRead());
        stmt.bindLong(10, entity.getType());
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(11, lastTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public News readEntity(Cursor cursor, int offset) {
        News entity = new News( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // link
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // category
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pubDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.getInt(offset + 7), // isSC
            cursor.getInt(offset + 8), // isRead
            cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // lastTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, News entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLink(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCategory(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPubDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsSC(cursor.getInt(offset + 7));
        entity.setIsRead(cursor.getInt(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setLastTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(News entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(News entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(News entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
